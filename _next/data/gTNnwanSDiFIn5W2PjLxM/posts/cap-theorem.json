{"pageProps":{"post":{"title":"CAP Teoremi","date":"2024-05-06","summary":"CAP Teoremi nedir? CAP Teoremi'nin açılımı nedir? CAP Teoremi'nin açıklaması ve detayları nelerdir?","body":{"raw":"\n# CAP Teoremi\n\n{props.rdrImg(\"/content-images/cap.png\", \"CAP Teoremi\")}\n\nBu teoreme göre, bir dağıtık sistem en fazla iki özelliği sağlayabilir; üçünü birden sağlamak mümkün değildir.\n* Tutarlılık (Consistency): Her istek sonucunda sistemdeki tüm düğümlerin aynı veriyi döndürmesi demektir. Yani, verilerin herhangi bir zamanda her düğümde aynı durumda olmasıdır.\n* Erişilebilirlik (Availability): Her istek için sistemdeki düğümlerden en az birinin başarılı bir şekilde yanıt vermesi demektir. Yani, sistem herhangi bir zamanda çalışır durumda olmasıdır.\n* Bölünme Toleransı (Partition Tolerance): Sistemdeki düğümler arasında oluşabilecek ağ problemleri ve aksaklıklara karşı dirençli olmasıdır. Yani, sistem herhangi bir zamanda bileşenleri arasında oluşabilecek aksaklıkların üstesinden gelebilmesidir.\n\n## PROJECTS\n\n### *CA (Consistency ve Availability):*\nÖrnek Proje: Banka Müşteri Bilgi Sistemi\nAçıklama: Bankalar, müşteri bilgilerinin her zaman kesinlikle doğru ve güncel tutulmasını gerektirir. Bu nedenle, tutarlılık ve erişilebilirlik bu projede önceliklidir. Tutarlılık sağlamak için, herhangi bir işlem tamamlandığında müşteri bilgileri anında güncellenir ve tüm banka şubeleri ve ATM'ler arasında konsolide edilir. Erişilebilirlik ise müşterilerin her zaman hesaplarına erişebilmelerini sağlar.\nPartition Tolarance feragat ederek sisteminizin tutarlı ve erişilebilir olması gereken durumlar için seçilir. Nodelar arası iletişim kaybolduğunda ise bunu tolere edemez.\nVerilerin doğruluğunun garanti edilmesini istediğimiz durumlarda uygundur. (İlişkisel databaseler, transactional işlemler)\n\nÖrnek: Microsoft Sql Server\n\n### *CP (Consistency ve Partition Tolerance):*\nÖrnek Proje: Akıllı Tedarik Zinciri Yönetimi\nAçıklama: Tedarik zinciri yönetimi, envanter yönetimi ve lojistik süreçlerin tutarlılık gereksinimleri yüksektir. Ağ bölünmesi durumunda bile, envanterin doğru bir şekilde yönetilmesi ve envanterin kaybolmaması kritiktir. Bu projede, tutarlılık önceliklidir, ancak ağ bölünmesi durumunda bazı depo veya şube sistemlerine erişim kesilebilir.\nVeri yazmak üzerine kurulu iş modelleri için uygundur. (Uygulama logları)\n\nÖrnek : Redis\n\n\n### *AP (Availability ve Partition Tolerance):*\nÖrnek Proje: Sosyal Medya Uygulaması\nAçıklama: Sosyal medya uygulamaları, kullanıcıların içeriklerini hızlı bir şekilde paylaşmalarını ve görmelerini gerektirir. Bu projede, erişilebilirlik ve kullanıcı deneyimi önceliklidir. Ağ bölünmesi durumunda bile kullanıcıların içeriklere erişebilmeleri ve paylaşabilmeleri önemlidir. Bu nedenle, tutarlılık riski alınabilir.\n\nÖrnek: Cassandra\n","code":"var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var o=Object.getOwnPropertyDescriptor;var c=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var n in e)a(r,n,{get:e[n],enumerable:!0})},t=(r,e,n,d)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of c(e))!h.call(r,l)&&l!==n&&a(r,l,{get:()=>e[l],enumerable:!(d=o(e,l))||d.enumerable});return r};var v=(r,e,n)=>(n=r!=null?u(b(r)):{},t(e||!r||!r.__esModule?a(n,\"default\",{value:r,enumerable:!0}):n,r)),p=r=>t(a({},\"__esModule\",{value:!0}),r);var s=y((j,m)=>{m.exports=_jsx_runtime});var P={};g(P,{default:()=>z,frontmatter:()=>A});var i=v(s()),A={title:\"CAP Teoremi\",date:new Date(17149536e5),summary:\"CAP Teoremi nedir? CAP Teoremi'nin a\\xE7\\u0131l\\u0131m\\u0131 nedir? CAP Teoremi'nin a\\xE7\\u0131klamas\\u0131 ve detaylar\\u0131 nelerdir?\"};function k(r){let e=Object.assign({h1:\"h1\",p:\"p\",ul:\"ul\",li:\"li\",h2:\"h2\",h3:\"h3\",em:\"em\"},r.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{children:\"CAP Teoremi\"}),`\n`,r.rdrImg(\"/content-images/cap.png\",\"CAP Teoremi\"),`\n`,(0,i.jsx)(e.p,{children:\"Bu teoreme g\\xF6re, bir da\\u011F\\u0131t\\u0131k sistem en fazla iki \\xF6zelli\\u011Fi sa\\u011Flayabilir; \\xFC\\xE7\\xFCn\\xFC birden sa\\u011Flamak m\\xFCmk\\xFCn de\\u011Fildir.\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:\"Tutarl\\u0131l\\u0131k (Consistency): Her istek sonucunda sistemdeki t\\xFCm d\\xFC\\u011F\\xFCmlerin ayn\\u0131 veriyi d\\xF6nd\\xFCrmesi demektir. Yani, verilerin herhangi bir zamanda her d\\xFC\\u011F\\xFCmde ayn\\u0131 durumda olmas\\u0131d\\u0131r.\"}),`\n`,(0,i.jsx)(e.li,{children:\"Eri\\u015Filebilirlik (Availability): Her istek i\\xE7in sistemdeki d\\xFC\\u011F\\xFCmlerden en az birinin ba\\u015Far\\u0131l\\u0131 bir \\u015Fekilde yan\\u0131t vermesi demektir. Yani, sistem herhangi bir zamanda \\xE7al\\u0131\\u015F\\u0131r durumda olmas\\u0131d\\u0131r.\"}),`\n`,(0,i.jsx)(e.li,{children:\"B\\xF6l\\xFCnme Tolerans\\u0131 (Partition Tolerance): Sistemdeki d\\xFC\\u011F\\xFCmler aras\\u0131nda olu\\u015Fabilecek a\\u011F problemleri ve aksakl\\u0131klara kar\\u015F\\u0131 diren\\xE7li olmas\\u0131d\\u0131r. Yani, sistem herhangi bir zamanda bile\\u015Fenleri aras\\u0131nda olu\\u015Fabilecek aksakl\\u0131klar\\u0131n \\xFCstesinden gelebilmesidir.\"}),`\n`]}),`\n`,(0,i.jsx)(e.h2,{children:\"PROJECTS\"}),`\n`,(0,i.jsx)(e.h3,{children:(0,i.jsx)(e.em,{children:\"CA (Consistency ve Availability):\"})}),`\n`,(0,i.jsx)(e.p,{children:`\\xD6rnek Proje: Banka M\\xFC\\u015Fteri Bilgi Sistemi\nA\\xE7\\u0131klama: Bankalar, m\\xFC\\u015Fteri bilgilerinin her zaman kesinlikle do\\u011Fru ve g\\xFCncel tutulmas\\u0131n\\u0131 gerektirir. Bu nedenle, tutarl\\u0131l\\u0131k ve eri\\u015Filebilirlik bu projede \\xF6nceliklidir. Tutarl\\u0131l\\u0131k sa\\u011Flamak i\\xE7in, herhangi bir i\\u015Flem tamamland\\u0131\\u011F\\u0131nda m\\xFC\\u015Fteri bilgileri an\\u0131nda g\\xFCncellenir ve t\\xFCm banka \\u015Fubeleri ve ATM'ler aras\\u0131nda konsolide edilir. Eri\\u015Filebilirlik ise m\\xFC\\u015Fterilerin her zaman hesaplar\\u0131na eri\\u015Febilmelerini sa\\u011Flar.\nPartition Tolarance feragat ederek sisteminizin tutarl\\u0131 ve eri\\u015Filebilir olmas\\u0131 gereken durumlar i\\xE7in se\\xE7ilir. Nodelar aras\\u0131 ileti\\u015Fim kayboldu\\u011Funda ise bunu tolere edemez.\nVerilerin do\\u011Frulu\\u011Funun garanti edilmesini istedi\\u011Fimiz durumlarda uygundur. (\\u0130li\\u015Fkisel databaseler, transactional i\\u015Flemler)`}),`\n`,(0,i.jsx)(e.p,{children:\"\\xD6rnek: Microsoft Sql Server\"}),`\n`,(0,i.jsx)(e.h3,{children:(0,i.jsx)(e.em,{children:\"CP (Consistency ve Partition Tolerance):\"})}),`\n`,(0,i.jsx)(e.p,{children:`\\xD6rnek Proje: Ak\\u0131ll\\u0131 Tedarik Zinciri Y\\xF6netimi\nA\\xE7\\u0131klama: Tedarik zinciri y\\xF6netimi, envanter y\\xF6netimi ve lojistik s\\xFCre\\xE7lerin tutarl\\u0131l\\u0131k gereksinimleri y\\xFCksektir. A\\u011F b\\xF6l\\xFCnmesi durumunda bile, envanterin do\\u011Fru bir \\u015Fekilde y\\xF6netilmesi ve envanterin kaybolmamas\\u0131 kritiktir. Bu projede, tutarl\\u0131l\\u0131k \\xF6nceliklidir, ancak a\\u011F b\\xF6l\\xFCnmesi durumunda baz\\u0131 depo veya \\u015Fube sistemlerine eri\\u015Fim kesilebilir.\nVeri yazmak \\xFCzerine kurulu i\\u015F modelleri i\\xE7in uygundur. (Uygulama loglar\\u0131)`}),`\n`,(0,i.jsx)(e.p,{children:\"\\xD6rnek : Redis\"}),`\n`,(0,i.jsx)(e.h3,{children:(0,i.jsx)(e.em,{children:\"AP (Availability ve Partition Tolerance):\"})}),`\n`,(0,i.jsx)(e.p,{children:`\\xD6rnek Proje: Sosyal Medya Uygulamas\\u0131\nA\\xE7\\u0131klama: Sosyal medya uygulamalar\\u0131, kullan\\u0131c\\u0131lar\\u0131n i\\xE7eriklerini h\\u0131zl\\u0131 bir \\u015Fekilde payla\\u015Fmalar\\u0131n\\u0131 ve g\\xF6rmelerini gerektirir. Bu projede, eri\\u015Filebilirlik ve kullan\\u0131c\\u0131 deneyimi \\xF6nceliklidir. A\\u011F b\\xF6l\\xFCnmesi durumunda bile kullan\\u0131c\\u0131lar\\u0131n i\\xE7eriklere eri\\u015Febilmeleri ve payla\\u015Fabilmeleri \\xF6nemlidir. Bu nedenle, tutarl\\u0131l\\u0131k riski al\\u0131nabilir.`}),`\n`,(0,i.jsx)(e.p,{children:\"\\xD6rnek: Cassandra\"})]})}function T(r={}){let{wrapper:e}=r.components||{};return e?(0,i.jsx)(e,Object.assign({},r,{children:(0,i.jsx)(k,r)})):k(r)}var z=T;return p(P);})();\n;return Component;"},"_id":"cap-theorem.mdx","_raw":{"sourceFilePath":"cap-theorem.mdx","sourceFileName":"cap-theorem.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"cap-theorem"},"type":"Post","url":"/posts/cap-theorem"}},"__N_SSG":true}