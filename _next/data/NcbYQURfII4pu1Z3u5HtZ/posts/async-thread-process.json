{"pageProps":{"post":{"title":"Async vs Thread vs Process","date":"2024-05-07","summary":"Asenkron işlem, Thread ve Process arasındaki farklar ve kullanım alanları. Asenkron işlem, Thread ve Process örnekleri.","body":{"raw":"\n# Asenkron İşlem\n\n{props.rdrImg(\n    \"/content-images/async-thread-process.png\",\n    \"\"\n)}\n\n## *Asenkron İşlem (Asynchronous Processing)*\nAsenkron işlem, işlemlerin sırayla tamamlanması yerine işlemlerin sırasız bir şekilde yürütüldüğü bir programlama yaklaşımıdır. Genellikle olaylar (events) veya iş parçacıkları (threads) arasında iletişim kurarken kullanılır. Bu, uzun süren işlemlerin başlatılmasına izin verirken ana iş akışının kesilmesini önler.\n\n**Örnek:** Bir web tarayıcısının sayfa yükleme işlemi. Tarayıcı, sayfayı yüklerken kullanıcı arayüzünün donmasını önlemek için asenkron işlemler kullanır.\n\n## *Çoklu İş Parçacığı (Multithreading)*\nÇoklu iş parçacığı, aynı program içinde birden fazla iş parçacığının (thread) aynı anda çalıştığı bir yaklaşımdır. Her iş parçacığı farklı bir görevi yürütebilir ve işletim sistemi bu iş parçacıklarını zaman dilimleri halinde sırayla çalıştırır. Bu, paralel işlem yapmanın bir yoludur ve paylaşılan kaynaklara erişimi yönetmek zor olabilir.\n\n**Örnek:** Bir medya oynatıcısının aynı anda sesi çalmak ve kullanıcı arayüzünü güncellemek için farklı iş parçacıkları kullanması.\n\n## *Çoklu İşlem (Multiprocessing)*\nÇoklu işlem, birden fazla işlemcinin veya çekirdeğin (CPU) kullanıldığı bir paralel işlem yaklaşımıdır. Her işlemci kendi bellek alanına sahiptir ve ayrı bir işlemi yürütebilir. Bu, daha büyük işlem yüklerini paralel olarak işlemek için kullanılır ve işletim sistemi tarafından yönetilen bağımsız işlemlerdir.\n\n**Örnek:** Bir sunucunun aynı anda birden fazla istemciye hizmet vermesi. Her istemci kendi işlemci kaynaklarını kullanarak işlemlerini gerçekleştirir.\n\nÖzetle, asenkron işlem, olaylar arasında geçiş yapmak için kullanılırken, çoklu iş parçacığı aynı program içinde farklı görevleri aynı anda çalıştırmak için ve çoklu işlem ise birden fazla işlemci kullanarak büyük iş yüklerini işlemek için kullanılır.","code":"var Component=(()=>{var d=Object.create;var l=Object.defineProperty;var o=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var p=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),b=(a,e)=>{for(var r in e)l(a,r,{get:e[r],enumerable:!0})},m=(a,e,r,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of y(e))!h.call(a,i)&&i!==r&&l(a,i,{get:()=>e[i],enumerable:!(s=o(e,i))||s.enumerable});return a};var g=(a,e,r)=>(r=a!=null?d(u(a)):{},m(e||!a||!a.__esModule?l(r,\"default\",{value:a,enumerable:!0}):r,a)),v=a=>m(l({},\"__esModule\",{value:!0}),a);var t=p((_,k)=>{k.exports=_jsx_runtime});var j={};b(j,{default:()=>x,frontmatter:()=>f});var n=g(t()),f={title:\"Async vs Thread vs Process\",date:new Date(171504e7),summary:\"Asenkron i\\u015Flem, Thread ve Process aras\\u0131ndaki farklar ve kullan\\u0131m alanlar\\u0131. Asenkron i\\u015Flem, Thread ve Process \\xF6rnekleri.\"};function c(a){let e=Object.assign({h1:\"h1\",h2:\"h2\",em:\"em\",p:\"p\",strong:\"strong\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Asenkron \\u0130\\u015Flem\"}),`\n`,a.rdrImg(\"/content-images/async-thread-process.png\",\"\"),`\n`,(0,n.jsx)(e.h2,{children:(0,n.jsx)(e.em,{children:\"Asenkron \\u0130\\u015Flem (Asynchronous Processing)\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Asenkron i\\u015Flem, i\\u015Flemlerin s\\u0131rayla tamamlanmas\\u0131 yerine i\\u015Flemlerin s\\u0131ras\\u0131z bir \\u015Fekilde y\\xFCr\\xFCt\\xFCld\\xFC\\u011F\\xFC bir programlama yakla\\u015F\\u0131m\\u0131d\\u0131r. Genellikle olaylar (events) veya i\\u015F par\\xE7ac\\u0131klar\\u0131 (threads) aras\\u0131nda ileti\\u015Fim kurarken kullan\\u0131l\\u0131r. Bu, uzun s\\xFCren i\\u015Flemlerin ba\\u015Flat\\u0131lmas\\u0131na izin verirken ana i\\u015F ak\\u0131\\u015F\\u0131n\\u0131n kesilmesini \\xF6nler.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"\\xD6rnek:\"}),\" Bir web taray\\u0131c\\u0131s\\u0131n\\u0131n sayfa y\\xFCkleme i\\u015Flemi. Taray\\u0131c\\u0131, sayfay\\u0131 y\\xFCklerken kullan\\u0131c\\u0131 aray\\xFCz\\xFCn\\xFCn donmas\\u0131n\\u0131 \\xF6nlemek i\\xE7in asenkron i\\u015Flemler kullan\\u0131r.\"]}),`\n`,(0,n.jsx)(e.h2,{children:(0,n.jsx)(e.em,{children:\"\\xC7oklu \\u0130\\u015F Par\\xE7ac\\u0131\\u011F\\u0131 (Multithreading)\"})}),`\n`,(0,n.jsx)(e.p,{children:\"\\xC7oklu i\\u015F par\\xE7ac\\u0131\\u011F\\u0131, ayn\\u0131 program i\\xE7inde birden fazla i\\u015F par\\xE7ac\\u0131\\u011F\\u0131n\\u0131n (thread) ayn\\u0131 anda \\xE7al\\u0131\\u015Ft\\u0131\\u011F\\u0131 bir yakla\\u015F\\u0131md\\u0131r. Her i\\u015F par\\xE7ac\\u0131\\u011F\\u0131 farkl\\u0131 bir g\\xF6revi y\\xFCr\\xFCtebilir ve i\\u015Fletim sistemi bu i\\u015F par\\xE7ac\\u0131klar\\u0131n\\u0131 zaman dilimleri halinde s\\u0131rayla \\xE7al\\u0131\\u015Ft\\u0131r\\u0131r. Bu, paralel i\\u015Flem yapman\\u0131n bir yoludur ve payla\\u015F\\u0131lan kaynaklara eri\\u015Fimi y\\xF6netmek zor olabilir.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"\\xD6rnek:\"}),\" Bir medya oynat\\u0131c\\u0131s\\u0131n\\u0131n ayn\\u0131 anda sesi \\xE7almak ve kullan\\u0131c\\u0131 aray\\xFCz\\xFCn\\xFC g\\xFCncellemek i\\xE7in farkl\\u0131 i\\u015F par\\xE7ac\\u0131klar\\u0131 kullanmas\\u0131.\"]}),`\n`,(0,n.jsx)(e.h2,{children:(0,n.jsx)(e.em,{children:\"\\xC7oklu \\u0130\\u015Flem (Multiprocessing)\"})}),`\n`,(0,n.jsx)(e.p,{children:\"\\xC7oklu i\\u015Flem, birden fazla i\\u015Flemcinin veya \\xE7ekirde\\u011Fin (CPU) kullan\\u0131ld\\u0131\\u011F\\u0131 bir paralel i\\u015Flem yakla\\u015F\\u0131m\\u0131d\\u0131r. Her i\\u015Flemci kendi bellek alan\\u0131na sahiptir ve ayr\\u0131 bir i\\u015Flemi y\\xFCr\\xFCtebilir. Bu, daha b\\xFCy\\xFCk i\\u015Flem y\\xFCklerini paralel olarak i\\u015Flemek i\\xE7in kullan\\u0131l\\u0131r ve i\\u015Fletim sistemi taraf\\u0131ndan y\\xF6netilen ba\\u011F\\u0131ms\\u0131z i\\u015Flemlerdir.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"\\xD6rnek:\"}),\" Bir sunucunun ayn\\u0131 anda birden fazla istemciye hizmet vermesi. Her istemci kendi i\\u015Flemci kaynaklar\\u0131n\\u0131 kullanarak i\\u015Flemlerini ger\\xE7ekle\\u015Ftirir.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"\\xD6zetle, asenkron i\\u015Flem, olaylar aras\\u0131nda ge\\xE7i\\u015F yapmak i\\xE7in kullan\\u0131l\\u0131rken, \\xE7oklu i\\u015F par\\xE7ac\\u0131\\u011F\\u0131 ayn\\u0131 program i\\xE7inde farkl\\u0131 g\\xF6revleri ayn\\u0131 anda \\xE7al\\u0131\\u015Ft\\u0131rmak i\\xE7in ve \\xE7oklu i\\u015Flem ise birden fazla i\\u015Flemci kullanarak b\\xFCy\\xFCk i\\u015F y\\xFCklerini i\\u015Flemek i\\xE7in kullan\\u0131l\\u0131r.\"})]})}function z(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(c,a)})):c(a)}var x=z;return v(j);})();\n;return Component;"},"_id":"async-thread-process.mdx","_raw":{"sourceFilePath":"async-thread-process.mdx","sourceFileName":"async-thread-process.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"async-thread-process"},"type":"Post","url":"/posts/async-thread-process"}},"__N_SSG":true}