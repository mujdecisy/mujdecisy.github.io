{"pageProps":{"post":{"title":"Gitlab Required Approvals Count Workaround","date":"2023-11-12","summary":"Even if you are not an Gitlab EE user, you can protect your branches with approval count requirement on your small private projects with your companions.","body":{"raw":"\n# Gitlab Required Approvals Count Workaround\n\nIf your side-project with your companions is nominated to be a big project, but not big enough to buy Gitlab/Github enterprise.\nThen you will not be able to use some beautiful features of Gitlab/Github like protecting branches with minimum approvals count.\nHere is a workaround for your project to achieve this feature over CI/CD steps.\nThis implementation is done directly on Gitlab, and you can implement same steps on Github too.\n\nSimply you can run some job/workflow when there is a merge request to your protected branch.\nIt can be anything like running unittests, checks for formatting, deployment on your test servers to prepare that future for QA developers.\nAnd you can set your MR to be possible only within some of these jobs done successfully.\nSo we can use this feature with the purpose of required approvals for an MR to a protected branch.\n\nHowever this approach depends on trust in team, because you can simply break this flow by commiting on your job definitions.\nHere is the instruction set for the implementation on Gitlab.\n\n## 1. Create a Job/Workflow\nThis job will be triggered on `merge_request_event`s to gather some data from Gitlab REST API.\nSo we need some access token on our project's environment variables.\n\n### 1.1 Create Your Access Token\nFollow the link below to create a **personal access token**.\nGitlab does not allow **project access tokens** for now to gitlab.com free users,\nhowever in case of being free in the future I left the link below.\n\n- [Personal Access Token Document](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token)\n- [Project Access Token Document](https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token)\n\nYou must define scopes below for the access token.\n- [x] api\n- [x] read_user\n- [x] read_api\n- [x] read_repository\n\n> Do not forget to copy your access token, you will not be able to do it after closing page.\n\n### 1.2 Set Access Token as a Variable\nThe one who make this settings must be the owner or maintainer of the project.\nSet your copied access token as an environment variable which is named `ACCESS_TOKEN` and will be a masked variable.\n\n- [Variable Definition Document](https://docs.gitlab.com/ee/ci/variables/#for-a-project)\n\nThe variable must be masked because we do not want to reveal our access token on job's output.\nAnd other users must have role `developer`, otherwise they can reveal your access token on settings page.\n\n\n### 1.3 Create an Approval-Check Step on Your CI\nOn your `.gitlab-ci.yml` file add a step called **approval-check** and make this step triggered on `merge_request` events.\nAnd put it in a proper stage to run.\n```\napproval-check:\n  stage: sdlc\n  only:\n    - merge_requests\n  script:\n    - apt-get -qq update\n    - apt-get install -y jq\n    - ./.gitlab_approval.sh ${ACCESS_TOKEN} $CI_PROJECT_ID $CI_MERGE_REQUEST_IID\n```\nYou should pass required parameters to the bash file.\nSince the file will call Gitlab API and evaluate the MR, it needs parameters below:\n- **$ACCESS_TOKEN** : to be authorized to Rest calls\n- **$CI_PROJECT_ID** : current project's id\n- **$CI_MERGE_REQUEST_IID** : current MR's id\n\nYou will see on the second section, how these parameters are used.\nYou must define your accesst_token variable on variables section, set a proper stage to your job.\n\n```\nstages:\n  - sdlc\n\n...\n\nvariables:\n  ACCESS_TOKEN: $ACCESS_TOKEN\n\n...\n\napproval-check:\n  stage: sdlc\n  only:\n    - merge_requests\n  script:\n    - apt-get -qq update\n    - apt-get install -y jq\n    - ./.gitlab_approval.sh ${ACCESS_TOKEN} $CI_PROJECT_ID $CI_MERGE_REQUEST_IID\n\n```\n\n\n## 2. Create Job/Workflow Logic\nCreate a bash file and make some Rest requests to gitlab.com to gather info about the MR.\nEvaluate approval info for that MR and return error if the approval count is not sufficient.\n\n#### 1.2 Install JQ\nYou must install [jq](https://jqlang.github.io/jq/) command line tool for json parsing.\nInstallation is already added to the `approval-check` job, and test purposes you can install it like below.\n\n```\n$ apt-get install jq\n```\n\n### 1.3 Create Bash file\nI named it `.gitlab-approval.sh` and located it in the root of repo folder.\nThis bash file have 3 parameters as below.\n```\n# $1 AN_ACCESS_TOKEN with read_api\n# $2 CI_PROJECT_ID\n# $3 CI_MERGE_REQUEST_IID\n```\n\n### 1.4 Gather Related Authors\nAuthor of the MR, and other companions that approves current MR are needed.\nThus [Merge Request Level Approvals](https://docs.gitlab.com/ee/api/merge_request_approvals.html#merge-request-level-mr-approvals) and [Get Single MR](https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr) endpoints are used.\n\n```\n# ----------------------------------- GATHER AUTHOR INFO\nresp_author=$(curl --header \"Authorization: Bearer ${1}\" -s \"https://gitlab.com/api/v4/projects/${2}/merge_requests/${3}\")\nauthor=$(echo $resp_author | tr -d '\\n' | jq -r '.author.username')\n\n# ----------------------------------- GATHER APPROVALS\nresp_approvals=$(curl --header \"Authorization: Bearer ${1}\" -s \"https://gitlab.com/api/v4/projects/${2}/merge_requests/${3}/approvals\")\napprovals=$(echo $resp_approvals | tr -d '\\n' | jq -r '.approved_by')\n\n```\n\n### 1.5 Counting Valid Approvals\nSelf-approval is needed to be excluded, and proper approvals should be counted as valid approvals.\n\n```\ntotal_approval_count=$(echo $approvals | jq length)\nvalid_approval_count=0\nfor index in $(seq 0 $(($total_approval_count-1)) )\ndo\n    approval_author=$(echo $approvals | jq -r \".[${index}].user.username\")\n    if [ \"${author}\" != \"${approval_author}\" ]; then\n        ((valid_approval_count++))\n    fi\ndone\n```\n\n### 1.6 Evaluate Valid Approval Count\nIf valid_approval_count is less than required_approval_count then script must exit with an error number, like 1.\nOtherwise it should exit with 0.\n\n```\nrequired_approval_count=2\n\nif [ $valid_approval_count -lt $required_approval_count ]; then\n    echo \">>>FAILURE<<< At least ${required_approval_count} approvals are needed, from other than the MR author.\"\n    exit 1\nfi\necho \">>>SUCCESS<<< This MR has ${required_approval_count} approvals, from other than the MR author.\"\nexit 0\n```\n\n## Conclusion\nWith this approach you can simply allow your main branch protected over required approval count for merge requests without paying it.\nHowever it depends on the trust in team, anyone can remove this job directly from `.gitlab-ci.yml` file and merge the request.\nIt is not that much strict as Gitlab/Github offers. That's why I called this as a workaround for only small teams.\n\nHope this article will help you with your small projects tend to become a bigger one with multiple development participants.\nHave a nice day!","code":"var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var v=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),_=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},l=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!b.call(r,o)&&o!==t&&a(r,o,{get:()=>e[o],enumerable:!(i=d(e,o))||i.enumerable});return r};var g=(r,e,t)=>(t=r!=null?p(m(r)):{},l(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),f=r=>l(a({},\"__esModule\",{value:!0}),r);var c=v((q,s)=>{s.exports=_jsx_runtime});var C={};_(C,{default:()=>k,frontmatter:()=>y});var n=g(c()),y={title:\"Gitlab Required Approvals Count Workaround\",date:new Date(16997472e5),summary:\"Even if you are not an Gitlab EE user, you can protect your branches with approval count requirement on your small private projects with your companions.\"};function h(r){let e=Object.assign({h1:\"h1\",p:\"p\",h2:\"h2\",code:\"code\",h3:\"h3\",strong:\"strong\",ul:\"ul\",li:\"li\",a:\"a\",blockquote:\"blockquote\",pre:\"pre\",h4:\"h4\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\"Gitlab Required Approvals Count Workaround\"}),`\n`,(0,n.jsx)(e.p,{children:`If your side-project with your companions is nominated to be a big project, but not big enough to buy Gitlab/Github enterprise.\nThen you will not be able to use some beautiful features of Gitlab/Github like protecting branches with minimum approvals count.\nHere is a workaround for your project to achieve this feature over CI/CD steps.\nThis implementation is done directly on Gitlab, and you can implement same steps on Github too.`}),`\n`,(0,n.jsx)(e.p,{children:`Simply you can run some job/workflow when there is a merge request to your protected branch.\nIt can be anything like running unittests, checks for formatting, deployment on your test servers to prepare that future for QA developers.\nAnd you can set your MR to be possible only within some of these jobs done successfully.\nSo we can use this feature with the purpose of required approvals for an MR to a protected branch.`}),`\n`,(0,n.jsx)(e.p,{children:`However this approach depends on trust in team, because you can simply break this flow by commiting on your job definitions.\nHere is the instruction set for the implementation on Gitlab.`}),`\n`,(0,n.jsx)(e.h2,{children:\"1. Create a Job/Workflow\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This job will be triggered on \",(0,n.jsx)(e.code,{children:\"merge_request_event\"}),`s to gather some data from Gitlab REST API.\nSo we need some access token on our project's environment variables.`]}),`\n`,(0,n.jsx)(e.h3,{children:\"1.1 Create Your Access Token\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Follow the link below to create a \",(0,n.jsx)(e.strong,{children:\"personal access token\"}),`.\nGitlab does not allow `,(0,n.jsx)(e.strong,{children:\"project access tokens\"}),` for now to gitlab.com free users,\nhowever in case of being free in the future I left the link below.`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token\",children:\"Personal Access Token Document\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token\",children:\"Project Access Token Document\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"You must define scopes below for the access token.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"[x] api\"}),`\n`,(0,n.jsx)(e.li,{children:\"[x] read_user\"}),`\n`,(0,n.jsx)(e.li,{children:\"[x] read_api\"}),`\n`,(0,n.jsx)(e.li,{children:\"[x] read_repository\"}),`\n`]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Do not forget to copy your access token, you will not be able to do it after closing page.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"1.2 Set Access Token as a Variable\"}),`\n`,(0,n.jsxs)(e.p,{children:[`The one who make this settings must be the owner or maintainer of the project.\nSet your copied access token as an environment variable which is named `,(0,n.jsx)(e.code,{children:\"ACCESS_TOKEN\"}),\" and will be a masked variable.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://docs.gitlab.com/ee/ci/variables/#for-a-project\",children:\"Variable Definition Document\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`The variable must be masked because we do not want to reveal our access token on job's output.\nAnd other users must have role `,(0,n.jsx)(e.code,{children:\"developer\"}),\", otherwise they can reveal your access token on settings page.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"1.3 Create an Approval-Check Step on Your CI\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"On your \",(0,n.jsx)(e.code,{children:\".gitlab-ci.yml\"}),\" file add a step called \",(0,n.jsx)(e.strong,{children:\"approval-check\"}),\" and make this step triggered on \",(0,n.jsx)(e.code,{children:\"merge_request\"}),` events.\nAnd put it in a proper stage to run.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`approval-check:\n  stage: sdlc\n  only:\n    - merge_requests\n  script:\n    - apt-get -qq update\n    - apt-get install -y jq\n    - ./.gitlab_approval.sh \\${ACCESS_TOKEN} $CI_PROJECT_ID $CI_MERGE_REQUEST_IID\n`})}),`\n`,(0,n.jsx)(e.p,{children:`You should pass required parameters to the bash file.\nSince the file will call Gitlab API and evaluate the MR, it needs parameters below:`}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"$ACCESS_TOKEN\"}),\" : to be authorized to Rest calls\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"$CI_PROJECT_ID\"}),\" : current project's id\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"$CI_MERGE_REQUEST_IID\"}),\" : current MR's id\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`You will see on the second section, how these parameters are used.\nYou must define your accesst_token variable on variables section, set a proper stage to your job.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`stages:\n  - sdlc\n\n...\n\nvariables:\n  ACCESS_TOKEN: $ACCESS_TOKEN\n\n...\n\napproval-check:\n  stage: sdlc\n  only:\n    - merge_requests\n  script:\n    - apt-get -qq update\n    - apt-get install -y jq\n    - ./.gitlab_approval.sh \\${ACCESS_TOKEN} $CI_PROJECT_ID $CI_MERGE_REQUEST_IID\n\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"2. Create Job/Workflow Logic\"}),`\n`,(0,n.jsx)(e.p,{children:`Create a bash file and make some Rest requests to gitlab.com to gather info about the MR.\nEvaluate approval info for that MR and return error if the approval count is not sufficient.`}),`\n`,(0,n.jsx)(e.h4,{children:\"1.2 Install JQ\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You must install \",(0,n.jsx)(e.a,{href:\"https://jqlang.github.io/jq/\",children:\"jq\"}),` command line tool for json parsing.\nInstallation is already added to the `,(0,n.jsx)(e.code,{children:\"approval-check\"}),\" job, and test purposes you can install it like below.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`$ apt-get install jq\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"1.3 Create Bash file\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I named it \",(0,n.jsx)(e.code,{children:\".gitlab-approval.sh\"}),` and located it in the root of repo folder.\nThis bash file have 3 parameters as below.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`# $1 AN_ACCESS_TOKEN with read_api\n# $2 CI_PROJECT_ID\n# $3 CI_MERGE_REQUEST_IID\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"1.4 Gather Related Authors\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Author of the MR, and other companions that approves current MR are needed.\nThus `,(0,n.jsx)(e.a,{href:\"https://docs.gitlab.com/ee/api/merge_request_approvals.html#merge-request-level-mr-approvals\",children:\"Merge Request Level Approvals\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr\",children:\"Get Single MR\"}),\" endpoints are used.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`# ----------------------------------- GATHER AUTHOR INFO\nresp_author=$(curl --header \"Authorization: Bearer \\${1}\" -s \"https://gitlab.com/api/v4/projects/\\${2}/merge_requests/\\${3}\")\nauthor=$(echo $resp_author | tr -d '\\\\n' | jq -r '.author.username')\n\n# ----------------------------------- GATHER APPROVALS\nresp_approvals=$(curl --header \"Authorization: Bearer \\${1}\" -s \"https://gitlab.com/api/v4/projects/\\${2}/merge_requests/\\${3}/approvals\")\napprovals=$(echo $resp_approvals | tr -d '\\\\n' | jq -r '.approved_by')\n\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"1.5 Counting Valid Approvals\"}),`\n`,(0,n.jsx)(e.p,{children:\"Self-approval is needed to be excluded, and proper approvals should be counted as valid approvals.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`total_approval_count=$(echo $approvals | jq length)\nvalid_approval_count=0\nfor index in $(seq 0 $(($total_approval_count-1)) )\ndo\n    approval_author=$(echo $approvals | jq -r \".[\\${index}].user.username\")\n    if [ \"\\${author}\" != \"\\${approval_author}\" ]; then\n        ((valid_approval_count++))\n    fi\ndone\n`})}),`\n`,(0,n.jsx)(e.h3,{children:\"1.6 Evaluate Valid Approval Count\"}),`\n`,(0,n.jsx)(e.p,{children:`If valid_approval_count is less than required_approval_count then script must exit with an error number, like 1.\nOtherwise it should exit with 0.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`required_approval_count=2\n\nif [ $valid_approval_count -lt $required_approval_count ]; then\n    echo \">>>FAILURE<<< At least \\${required_approval_count} approvals are needed, from other than the MR author.\"\n    exit 1\nfi\necho \">>>SUCCESS<<< This MR has \\${required_approval_count} approvals, from other than the MR author.\"\nexit 0\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Conclusion\"}),`\n`,(0,n.jsxs)(e.p,{children:[`With this approach you can simply allow your main branch protected over required approval count for merge requests without paying it.\nHowever it depends on the trust in team, anyone can remove this job directly from `,(0,n.jsx)(e.code,{children:\".gitlab-ci.yml\"}),` file and merge the request.\nIt is not that much strict as Gitlab/Github offers. That's why I called this as a workaround for only small teams.`]}),`\n`,(0,n.jsx)(e.p,{children:`Hope this article will help you with your small projects tend to become a bigger one with multiple development participants.\nHave a nice day!`})]})}function w(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var k=w;return f(C);})();\n;return Component;"},"_id":"gitlab-required-approvals-workaround.mdx","_raw":{"sourceFilePath":"gitlab-required-approvals-workaround.mdx","sourceFileName":"gitlab-required-approvals-workaround.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"gitlab-required-approvals-workaround"},"type":"Post","url":"/posts/gitlab-required-approvals-workaround"}},"__N_SSG":true}