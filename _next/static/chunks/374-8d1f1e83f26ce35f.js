"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[374],{2997:function(e,n,r){r.d(n,{fd:function(){return a}}),r(568);var a=JSON.parse('[{"title":"CAP Teoremi","date":"2024-05-06","summary":"CAP Teoremi nedir? CAP Teoremi\'nin a\xe7ılımı nedir? CAP Teoremi\'nin a\xe7ıklaması ve detayları nelerdir?","body":{"raw":"\\n# CAP Teoremi\\n\\n{props.rdrImg(\\"/images/cap-theorem.png\\", \\"CAP Teoremi\\")}\\n\\nBu teoreme g\xf6re, bir dağıtık sistem en fazla iki \xf6zelliği sağlayabilir; \xfc\xe7\xfcn\xfc birden sağlamak m\xfcmk\xfcn değildir.\\n* Tutarlılık (Consistency): Her istek sonucunda sistemdeki t\xfcm d\xfcğ\xfcmlerin aynı veriyi d\xf6nd\xfcrmesi demektir. Yani, verilerin herhangi bir zamanda her d\xfcğ\xfcmde aynı durumda olmasıdır.\\n* Erişilebilirlik (Availability): Her istek i\xe7in sistemdeki d\xfcğ\xfcmlerden en az birinin başarılı bir şekilde yanıt vermesi demektir. Yani, sistem herhangi bir zamanda \xe7alışır durumda olmasıdır.\\n* B\xf6l\xfcnme Toleransı (Partition Tolerance): Sistemdeki d\xfcğ\xfcmler arasında oluşabilecek ağ problemleri ve aksaklıklara karşı diren\xe7li olmasıdır. Yani, sistem herhangi bir zamanda bileşenleri arasında oluşabilecek aksaklıkların \xfcstesinden gelebilmesidir.\\n\\n## PROJECTS\\n\\n### *CA (Consistency ve Availability):*\\n\xd6rnek Proje: Banka M\xfcşteri Bilgi Sistemi\\nA\xe7ıklama: Bankalar, m\xfcşteri bilgilerinin her zaman kesinlikle doğru ve g\xfcncel tutulmasını gerektirir. Bu nedenle, tutarlılık ve erişilebilirlik bu projede \xf6nceliklidir. Tutarlılık sağlamak i\xe7in, herhangi bir işlem tamamlandığında m\xfcşteri bilgileri anında g\xfcncellenir ve t\xfcm banka şubeleri ve ATM\'ler arasında konsolide edilir. Erişilebilirlik ise m\xfcşterilerin her zaman hesaplarına erişebilmelerini sağlar.\\nPartition Tolarance feragat ederek sisteminizin tutarlı ve erişilebilir olması gereken durumlar i\xe7in se\xe7ilir. Nodelar arası iletişim kaybolduğunda ise bunu tolere edemez.\\nVerilerin doğruluğunun garanti edilmesini istediğimiz durumlarda uygundur. (İlişkisel databaseler, transactional işlemler)\\n\\n\xd6rnek: Microsoft Sql Server\\n\\n### *CP (Consistency ve Partition Tolerance):*\\n\xd6rnek Proje: Akıllı Tedarik Zinciri Y\xf6netimi\\nA\xe7ıklama: Tedarik zinciri y\xf6netimi, envanter y\xf6netimi ve lojistik s\xfcre\xe7lerin tutarlılık gereksinimleri y\xfcksektir. Ağ b\xf6l\xfcnmesi durumunda bile, envanterin doğru bir şekilde y\xf6netilmesi ve envanterin kaybolmaması kritiktir. Bu projede, tutarlılık \xf6nceliklidir, ancak ağ b\xf6l\xfcnmesi durumunda bazı depo veya şube sistemlerine erişim kesilebilir.\\nVeri yazmak \xfczerine kurulu iş modelleri i\xe7in uygundur. (Uygulama logları)\\n\\n\xd6rnek : Redis\\n\\n\\n### *AP (Availability ve Partition Tolerance):*\\n\xd6rnek Proje: Sosyal Medya Uygulaması\\nA\xe7ıklama: Sosyal medya uygulamaları, kullanıcıların i\xe7eriklerini hızlı bir şekilde paylaşmalarını ve g\xf6rmelerini gerektirir. Bu projede, erişilebilirlik ve kullanıcı deneyimi \xf6nceliklidir. Ağ b\xf6l\xfcnmesi durumunda bile kullanıcıların i\xe7eriklere erişebilmeleri ve paylaşabilmeleri \xf6nemlidir. Bu nedenle, tutarlılık riski alınabilir.\\n\\n\xd6rnek: Cassandra\\n","code":"var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var o=Object.getOwnPropertyDescriptor;var c=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var y=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var n in e)a(r,n,{get:e[n],enumerable:!0})},m=(r,e,n,d)=>{if(e&&typeof e==\\"object\\"||typeof e==\\"function\\")for(let l of c(e))!h.call(r,l)&&l!==n&&a(r,l,{get:()=>e[l],enumerable:!(d=o(e,l))||d.enumerable});return r};var v=(r,e,n)=>(n=r!=null?u(b(r)):{},m(e||!r||!r.__esModule?a(n,\\"default\\",{value:r,enumerable:!0}):n,r)),p=r=>m(a({},\\"__esModule\\",{value:!0}),r);var s=y((j,t)=>{t.exports=_jsx_runtime});var P={};g(P,{default:()=>z,frontmatter:()=>A});var i=v(s()),A={title:\\"CAP Teoremi\\",date:new Date(17149536e5),summary:\\"CAP Teoremi nedir? CAP Teoremi\'nin a\\\\xE7\\\\u0131l\\\\u0131m\\\\u0131 nedir? CAP Teoremi\'nin a\\\\xE7\\\\u0131klamas\\\\u0131 ve detaylar\\\\u0131 nelerdir?\\"};function k(r){let e=Object.assign({h1:\\"h1\\",p:\\"p\\",ul:\\"ul\\",li:\\"li\\",h2:\\"h2\\",h3:\\"h3\\",em:\\"em\\"},r.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{children:\\"CAP Teoremi\\"}),`\\n`,r.rdrImg(\\"/images/cap-theorem.png\\",\\"CAP Teoremi\\"),`\\n`,(0,i.jsx)(e.p,{children:\\"Bu teoreme g\\\\xF6re, bir da\\\\u011F\\\\u0131t\\\\u0131k sistem en fazla iki \\\\xF6zelli\\\\u011Fi sa\\\\u011Flayabilir; \\\\xFC\\\\xE7\\\\xFCn\\\\xFC birden sa\\\\u011Flamak m\\\\xFCmk\\\\xFCn de\\\\u011Fildir.\\"}),`\\n`,(0,i.jsxs)(e.ul,{children:[`\\n`,(0,i.jsx)(e.li,{children:\\"Tutarl\\\\u0131l\\\\u0131k (Consistency): Her istek sonucunda sistemdeki t\\\\xFCm d\\\\xFC\\\\u011F\\\\xFCmlerin ayn\\\\u0131 veriyi d\\\\xF6nd\\\\xFCrmesi demektir. Yani, verilerin herhangi bir zamanda her d\\\\xFC\\\\u011F\\\\xFCmde ayn\\\\u0131 durumda olmas\\\\u0131d\\\\u0131r.\\"}),`\\n`,(0,i.jsx)(e.li,{children:\\"Eri\\\\u015Filebilirlik (Availability): Her istek i\\\\xE7in sistemdeki d\\\\xFC\\\\u011F\\\\xFCmlerden en az birinin ba\\\\u015Far\\\\u0131l\\\\u0131 bir \\\\u015Fekilde yan\\\\u0131t vermesi demektir. Yani, sistem herhangi bir zamanda \\\\xE7al\\\\u0131\\\\u015F\\\\u0131r durumda olmas\\\\u0131d\\\\u0131r.\\"}),`\\n`,(0,i.jsx)(e.li,{children:\\"B\\\\xF6l\\\\xFCnme Tolerans\\\\u0131 (Partition Tolerance): Sistemdeki d\\\\xFC\\\\u011F\\\\xFCmler aras\\\\u0131nda olu\\\\u015Fabilecek a\\\\u011F problemleri ve aksakl\\\\u0131klara kar\\\\u015F\\\\u0131 diren\\\\xE7li olmas\\\\u0131d\\\\u0131r. Yani, sistem herhangi bir zamanda bile\\\\u015Fenleri aras\\\\u0131nda olu\\\\u015Fabilecek aksakl\\\\u0131klar\\\\u0131n \\\\xFCstesinden gelebilmesidir.\\"}),`\\n`]}),`\\n`,(0,i.jsx)(e.h2,{children:\\"PROJECTS\\"}),`\\n`,(0,i.jsx)(e.h3,{children:(0,i.jsx)(e.em,{children:\\"CA (Consistency ve Availability):\\"})}),`\\n`,(0,i.jsx)(e.p,{children:`\\\\xD6rnek Proje: Banka M\\\\xFC\\\\u015Fteri Bilgi Sistemi\\nA\\\\xE7\\\\u0131klama: Bankalar, m\\\\xFC\\\\u015Fteri bilgilerinin her zaman kesinlikle do\\\\u011Fru ve g\\\\xFCncel tutulmas\\\\u0131n\\\\u0131 gerektirir. Bu nedenle, tutarl\\\\u0131l\\\\u0131k ve eri\\\\u015Filebilirlik bu projede \\\\xF6nceliklidir. Tutarl\\\\u0131l\\\\u0131k sa\\\\u011Flamak i\\\\xE7in, herhangi bir i\\\\u015Flem tamamland\\\\u0131\\\\u011F\\\\u0131nda m\\\\xFC\\\\u015Fteri bilgileri an\\\\u0131nda g\\\\xFCncellenir ve t\\\\xFCm banka \\\\u015Fubeleri ve ATM\'ler aras\\\\u0131nda konsolide edilir. Eri\\\\u015Filebilirlik ise m\\\\xFC\\\\u015Fterilerin her zaman hesaplar\\\\u0131na eri\\\\u015Febilmelerini sa\\\\u011Flar.\\nPartition Tolarance feragat ederek sisteminizin tutarl\\\\u0131 ve eri\\\\u015Filebilir olmas\\\\u0131 gereken durumlar i\\\\xE7in se\\\\xE7ilir. Nodelar aras\\\\u0131 ileti\\\\u015Fim kayboldu\\\\u011Funda ise bunu tolere edemez.\\nVerilerin do\\\\u011Frulu\\\\u011Funun garanti edilmesini istedi\\\\u011Fimiz durumlarda uygundur. (\\\\u0130li\\\\u015Fkisel databaseler, transactional i\\\\u015Flemler)`}),`\\n`,(0,i.jsx)(e.p,{children:\\"\\\\xD6rnek: Microsoft Sql Server\\"}),`\\n`,(0,i.jsx)(e.h3,{children:(0,i.jsx)(e.em,{children:\\"CP (Consistency ve Partition Tolerance):\\"})}),`\\n`,(0,i.jsx)(e.p,{children:`\\\\xD6rnek Proje: Ak\\\\u0131ll\\\\u0131 Tedarik Zinciri Y\\\\xF6netimi\\nA\\\\xE7\\\\u0131klama: Tedarik zinciri y\\\\xF6netimi, envanter y\\\\xF6netimi ve lojistik s\\\\xFCre\\\\xE7lerin tutarl\\\\u0131l\\\\u0131k gereksinimleri y\\\\xFCksektir. A\\\\u011F b\\\\xF6l\\\\xFCnmesi durumunda bile, envanterin do\\\\u011Fru bir \\\\u015Fekilde y\\\\xF6netilmesi ve envanterin kaybolmamas\\\\u0131 kritiktir. Bu projede, tutarl\\\\u0131l\\\\u0131k \\\\xF6nceliklidir, ancak a\\\\u011F b\\\\xF6l\\\\xFCnmesi durumunda baz\\\\u0131 depo veya \\\\u015Fube sistemlerine eri\\\\u015Fim kesilebilir.\\nVeri yazmak \\\\xFCzerine kurulu i\\\\u015F modelleri i\\\\xE7in uygundur. (Uygulama loglar\\\\u0131)`}),`\\n`,(0,i.jsx)(e.p,{children:\\"\\\\xD6rnek : Redis\\"}),`\\n`,(0,i.jsx)(e.h3,{children:(0,i.jsx)(e.em,{children:\\"AP (Availability ve Partition Tolerance):\\"})}),`\\n`,(0,i.jsx)(e.p,{children:`\\\\xD6rnek Proje: Sosyal Medya Uygulamas\\\\u0131\\nA\\\\xE7\\\\u0131klama: Sosyal medya uygulamalar\\\\u0131, kullan\\\\u0131c\\\\u0131lar\\\\u0131n i\\\\xE7eriklerini h\\\\u0131zl\\\\u0131 bir \\\\u015Fekilde payla\\\\u015Fmalar\\\\u0131n\\\\u0131 ve g\\\\xF6rmelerini gerektirir. Bu projede, eri\\\\u015Filebilirlik ve kullan\\\\u0131c\\\\u0131 deneyimi \\\\xF6nceliklidir. A\\\\u011F b\\\\xF6l\\\\xFCnmesi durumunda bile kullan\\\\u0131c\\\\u0131lar\\\\u0131n i\\\\xE7eriklere eri\\\\u015Febilmeleri ve payla\\\\u015Fabilmeleri \\\\xF6nemlidir. Bu nedenle, tutarl\\\\u0131l\\\\u0131k riski al\\\\u0131nabilir.`}),`\\n`,(0,i.jsx)(e.p,{children:\\"\\\\xD6rnek: Cassandra\\"})]})}function T(r={}){let{wrapper:e}=r.components||{};return e?(0,i.jsx)(e,Object.assign({},r,{children:(0,i.jsx)(k,r)})):k(r)}var z=T;return p(P);})();\\n;return Component;"},"_id":"cap-theorem.mdx","_raw":{"sourceFilePath":"cap-theorem.mdx","sourceFileName":"cap-theorem.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"cap-theorem"},"type":"Post","url":"/posts/cap-theorem"},{"title":"Python Disassemble Kullanim Rehberi","date":"2024-05-05","summary":"Python disassemble neden ve nasil kullanilir? Komutlari ne ifade eder? Kod takibi nasil yapilir?","body":{"raw":"\\n# Python Disassemble Kullanim Rehberi\\n","code":"var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(e,n)=>()=>(n||e((n={exports:{}}).exports,n),n.exports),y=(e,n)=>{for(var t in n)s(e,t,{get:n[t],enumerable:!0})},r=(e,n,t,o)=>{if(n&&typeof n==\\"object\\"||typeof n==\\"function\\")for(let i of h(n))!x.call(e,i)&&i!==t&&s(e,i,{get:()=>n[i],enumerable:!(o=d(n,i))||o.enumerable});return e};var j=(e,n,t)=>(t=e!=null?u(b(e)):{},r(n||!e||!e.__esModule?s(t,\\"default\\",{value:e,enumerable:!0}):t,e)),D=e=>r(s({},\\"__esModule\\",{value:!0}),e);var m=f((g,l)=>{l.exports=_jsx_runtime});var M={};y(M,{default:()=>K,frontmatter:()=>_});var a=j(m()),_={title:\\"Python Disassemble Kullanim Rehberi\\",date:new Date(17148672e5),summary:\\"Python disassemble neden ve nasil kullanilir? Komutlari ne ifade eder? Kod takibi nasil yapilir?\\"};function c(e){let n=Object.assign({h1:\\"h1\\"},e.components);return(0,a.jsx)(n.h1,{children:\\"Python Disassemble Kullanim Rehberi\\"})}function p(e={}){let{wrapper:n}=e.components||{};return n?(0,a.jsx)(n,Object.assign({},e,{children:(0,a.jsx)(c,e)})):c(e)}var K=p;return D(M);})();\\n;return Component;"},"_id":"python-disassemble-kullanim-rehberi.mdx","_raw":{"sourceFilePath":"python-disassemble-kullanim-rehberi.mdx","sourceFileName":"python-disassemble-kullanim-rehberi.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"python-disassemble-kullanim-rehberi"},"type":"Post","url":"/posts/python-disassemble-kullanim-rehberi"},{"title":"Required Approvals Count for GitLab Free Tier","date":"2023-11-12","summary":"Even if you are not a GitLab EE user, you can protect your branches with an approval count requirement on your small private projects with your companions.","body":{"raw":"\\n# Required Approvals Count for GitLab Free Tier\\n\\nIf your side project with your companions is nominated to be a big project but not big enough to buy GitLab/GitHub Enterprise, then you will not be able to use some beautiful features of GitLab/GitHub like protecting branches with a minimum approvals count. Here is a workaround for your project to achieve this feature over CI/CD steps. This implementation is done directly on GitLab, and you can implement the same steps on GitHub too.\\n\\nSimply put, you can run some job/workflow when there is a merge request to your protected branch. It can be anything like running unit tests, checks for formatting, deployment on your test servers to prepare that feature for QA developers. And you can set your MR to be possible only within some of these jobs done successfully. So we can use this feature with the purpose of requiring approvals for an MR to a protected branch.\\n\\nHowever, this approach depends on trust within the team because you can simply break this flow by committing changes to your job definitions. Here are the instructions for implementing this on GitLab.\\n\\n## 1. Create a Job/Workflow\\nThis job will be triggered on `merge_request_events` to gather some data from the GitLab REST API. Therefore, we need to have an access token in our project\'s environment variables.\\n\\n### 1.1 Create Your Access Token\\nFollow the link below to create a **personal access token**. GitLab does not allow **project access tokens** for now for gitlab.com free users. However, in case of being free in the future, I\'ve left the link below.\\n\\n- [Personal Access Token Document](https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token)\\n- [Project Access Token Document](https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token)\\n\\nYou must define scopes below for the access token.\\n- [x] api\\n- [x] read_user\\n- [x] read_api\\n- [x] read_repository\\n\\n> Do not forget to copy your access token; you will not be able to do it after closing the page.\\n\\n### 1.2 Set Access Token as a Variable\\nThe one who makes these settings must be the owner or maintainer of the project. Set your copied access token as an environment variable named `ACCESS_TOKEN`, and it will be a masked variable.\\n\\n- [Variable Definition Document](https://docs.gitlab.com/ee/ci/variables/#for-a-project)\\n\\nThe variable must be masked because we do not want to reveal our access token in the job\'s output. And other users must have the role `developer`; otherwise, they can reveal your access token on the settings page.\\n\\n### 1.3 Create an Approval-Check Step on Your CI\\nIn your `.gitlab-ci.yml` file, add a step called **approval-check** and make this step triggered on `merge_request` events. And put it in a proper stage to run.\\n\\n```yaml\\napproval-check:\\n  stage: sdlc\\n  only:\\n    - merge_requests\\n  script:\\n    - apt-get -qq update\\n    - apt-get install -y jq\\n    - ./.gitlab_approval.sh ${ACCESS_TOKEN} $CI_PROJECT_ID $CI_MERGE_REQUEST_IID\\n```\\n\\nYou should pass required parameters to the bash file. Since the file will call the GitLab API and evaluate the MR, it needs the parameters below:\\n- **$ACCESS_TOKEN**: to be authorized to Rest calls\\n- **$CI_PROJECT_ID**: current project\'s id\\n- **$CI_MERGE_REQUEST_IID**: current MR\'s id\\n\\nYou will see in the second section how these parameters are used. You must define your access token variable in the variables section and set a proper stage for your job.\\n\\n```yaml\\nstages:\\n  - sdlc\\n\\n...\\n\\nvariables:\\n  ACCESS_TOKEN: $ACCESS_TOKEN\\n\\n...\\n\\napproval-check:\\n  stage: sdlc\\n  only:\\n    - merge_requests\\n  script:\\n    - apt-get -qq update\\n    - apt-get install -y jq\\n    - ./.gitlab_approval.sh ${ACCESS_TOKEN} $CI_PROJECT_ID $CI_MERGE_REQUEST_IID\\n```\\n\\n## 2. Create Job/Workflow Logic\\nCreate a bash file and make some REST requests to gitlab.com to gather info about the MR. Evaluate approval info for that MR and return an error if the approval count is not sufficient.\\n\\n### 2.1 Install JQ\\nYou must install [jq](https://jqlang.github.io/jq/) command-line tool for JSON parsing. Installation is already added to the `approval-check` job, and for test purposes, you can install it like below.\\n\\n```bash\\n$ apt-get install jq\\n```\\n\\n### 2.2 Create Bash file\\nI named it `.gitlab-approval.sh` and located it in the root of the repo folder. This bash file has 3 parameters as below.\\n\\n```bash\\n# $1 AN_ACCESS_TOKEN with read_api\\n# $2 CI_PROJECT_ID\\n# $3 CI_MERGE_REQUEST_IID\\n```\\n\\n### 2.3 Gather Related Authors\\nThe author of the MR and other companions that approve the current MR are needed. Thus [Merge Request Level Approvals](https://docs.gitlab.com/ee/api/merge_request_approvals.html#merge-request-level-mr-approvals) and [Get Single MR](https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr) endpoints are used.\\n\\n```bash\\n# ----------------------------------- GATHER AUTHOR INFO\\nresp_author=$(curl --header \\"Authorization: Bearer ${1}\\" -s \\"https://gitlab.com/api/v4/projects/${2}/merge_requests/${3}\\")\\nauthor=$(echo $resp_author | tr -d \'\\\\n\' | jq -r \'.author.username\')\\n\\n# ----------------------------------- GATHER APPROVALS\\nresp_approvals=$(curl --header \\"Authorization: Bearer ${1}\\" -s \\"https://gitlab.com/api/v4/projects/${2}/merge_requests/${3}/approvals\\")\\napprovals=$(echo $resp_approvals | tr -d \'\\\\n\' | jq -r \'.approved_by\')\\n```\\n\\n### 2.4 Counting Valid Approvals\\nSelf-approval is needed to be excluded, and proper approvals should be counted as valid approvals.\\n\\n```bash\\ntotal_approval_count=$(echo $approvals | jq length)\\nvalid_approval_count=0\\nfor index in $(seq 0 $(($total_approval_count-1)) )\\ndo\\n    approval_author=$(echo $approvals | jq -r \\".[${index}].user.username\\")\\n    if [ \\"${author}\\" != \\"${approval_author}\\" ]; then\\n        ((valid_approval_count++))\\n    fi\\ndone\\n```\\n\\n### 2.5 Evaluate Valid Approval Count\\nIf the valid_approval_count is less than the required_approval_count, then the script must exit with an error number, like 1. Otherwise, it should exit with 0.\\n\\n```bash\\nrequired_approval_count=2\\n\\nif [ $valid_approval_count -lt $required_approval_count ]; then\\n    echo \\">>>FAILURE<<< At least ${required_approval_count} approvals are needed, from other than the MR author.\\"\\n    exit 1\\nfi\\necho \\">>>SUCCESS<<< This MR has ${required_approval_count} approvals, from other than the MR author.\\"\\nexit 0\\n```\\n\\n## Conclusion\\nWith this approach, you can simply allow your main branch protected over the required approval count for merge requests without paying for it. However, it depends on the trust in the team; anyone can remove this job directly from the `.gitlab-ci.yml` file and merge the request. It is not that strict as GitLab/GitHub offers. That\'s why I called this a workaround for only small teams.\\n\\nHope this article will help you with your small projects tend to become a bigger one with multiple development participants. Have a nice day!","code":"var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},l=(t,e,r,i)=>{if(e&&typeof e==\\"object\\"||typeof e==\\"function\\")for(let a of u(e))!b.call(t,a)&&a!==r&&o(t,a,{get:()=>e[a],enumerable:!(i=d(e,a))||i.enumerable});return t};var f=(t,e,r)=>(r=t!=null?p(m(t)):{},l(e||!t||!t.__esModule?o(r,\\"default\\",{value:t,enumerable:!0}):r,t)),_=t=>l(o({},\\"__esModule\\",{value:!0}),t);var c=g((q,s)=>{s.exports=_jsx_runtime});var C={};v(C,{default:()=>E,frontmatter:()=>y});var n=f(c()),y={title:\\"Required Approvals Count for GitLab Free Tier\\",date:new Date(16997472e5),summary:\\"Even if you are not a GitLab EE user, you can protect your branches with an approval count requirement on your small private projects with your companions.\\"};function h(t){let e=Object.assign({h1:\\"h1\\",p:\\"p\\",h2:\\"h2\\",code:\\"code\\",h3:\\"h3\\",strong:\\"strong\\",ul:\\"ul\\",li:\\"li\\",a:\\"a\\",blockquote:\\"blockquote\\",pre:\\"pre\\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{children:\\"Required Approvals Count for GitLab Free Tier\\"}),`\\n`,(0,n.jsx)(e.p,{children:\\"If your side project with your companions is nominated to be a big project but not big enough to buy GitLab/GitHub Enterprise, then you will not be able to use some beautiful features of GitLab/GitHub like protecting branches with a minimum approvals count. Here is a workaround for your project to achieve this feature over CI/CD steps. This implementation is done directly on GitLab, and you can implement the same steps on GitHub too.\\"}),`\\n`,(0,n.jsx)(e.p,{children:\\"Simply put, you can run some job/workflow when there is a merge request to your protected branch. It can be anything like running unit tests, checks for formatting, deployment on your test servers to prepare that feature for QA developers. And you can set your MR to be possible only within some of these jobs done successfully. So we can use this feature with the purpose of requiring approvals for an MR to a protected branch.\\"}),`\\n`,(0,n.jsx)(e.p,{children:\\"However, this approach depends on trust within the team because you can simply break this flow by committing changes to your job definitions. Here are the instructions for implementing this on GitLab.\\"}),`\\n`,(0,n.jsx)(e.h2,{children:\\"1. Create a Job/Workflow\\"}),`\\n`,(0,n.jsxs)(e.p,{children:[\\"This job will be triggered on \\",(0,n.jsx)(e.code,{children:\\"merge_request_events\\"}),\\" to gather some data from the GitLab REST API. Therefore, we need to have an access token in our project\'s environment variables.\\"]}),`\\n`,(0,n.jsx)(e.h3,{children:\\"1.1 Create Your Access Token\\"}),`\\n`,(0,n.jsxs)(e.p,{children:[\\"Follow the link below to create a \\",(0,n.jsx)(e.strong,{children:\\"personal access token\\"}),\\". GitLab does not allow \\",(0,n.jsx)(e.strong,{children:\\"project access tokens\\"}),\\" for now for gitlab.com free users. However, in case of being free in the future, I\'ve left the link below.\\"]}),`\\n`,(0,n.jsxs)(e.ul,{children:[`\\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\\"https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html#create-a-personal-access-token\\",children:\\"Personal Access Token Document\\"})}),`\\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\\"https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html#create-a-project-access-token\\",children:\\"Project Access Token Document\\"})}),`\\n`]}),`\\n`,(0,n.jsx)(e.p,{children:\\"You must define scopes below for the access token.\\"}),`\\n`,(0,n.jsxs)(e.ul,{children:[`\\n`,(0,n.jsx)(e.li,{children:\\"[x] api\\"}),`\\n`,(0,n.jsx)(e.li,{children:\\"[x] read_user\\"}),`\\n`,(0,n.jsx)(e.li,{children:\\"[x] read_api\\"}),`\\n`,(0,n.jsx)(e.li,{children:\\"[x] read_repository\\"}),`\\n`]}),`\\n`,(0,n.jsxs)(e.blockquote,{children:[`\\n`,(0,n.jsx)(e.p,{children:\\"Do not forget to copy your access token; you will not be able to do it after closing the page.\\"}),`\\n`]}),`\\n`,(0,n.jsx)(e.h3,{children:\\"1.2 Set Access Token as a Variable\\"}),`\\n`,(0,n.jsxs)(e.p,{children:[\\"The one who makes these settings must be the owner or maintainer of the project. Set your copied access token as an environment variable named \\",(0,n.jsx)(e.code,{children:\\"ACCESS_TOKEN\\"}),\\", and it will be a masked variable.\\"]}),`\\n`,(0,n.jsxs)(e.ul,{children:[`\\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\\"https://docs.gitlab.com/ee/ci/variables/#for-a-project\\",children:\\"Variable Definition Document\\"})}),`\\n`]}),`\\n`,(0,n.jsxs)(e.p,{children:[\\"The variable must be masked because we do not want to reveal our access token in the job\'s output. And other users must have the role \\",(0,n.jsx)(e.code,{children:\\"developer\\"}),\\"; otherwise, they can reveal your access token on the settings page.\\"]}),`\\n`,(0,n.jsx)(e.h3,{children:\\"1.3 Create an Approval-Check Step on Your CI\\"}),`\\n`,(0,n.jsxs)(e.p,{children:[\\"In your \\",(0,n.jsx)(e.code,{children:\\".gitlab-ci.yml\\"}),\\" file, add a step called \\",(0,n.jsx)(e.strong,{children:\\"approval-check\\"}),\\" and make this step triggered on \\",(0,n.jsx)(e.code,{children:\\"merge_request\\"}),\\" events. And put it in a proper stage to run.\\"]}),`\\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\\"language-yaml\\",children:`approval-check:\\n  stage: sdlc\\n  only:\\n    - merge_requests\\n  script:\\n    - apt-get -qq update\\n    - apt-get install -y jq\\n    - ./.gitlab_approval.sh \\\\${ACCESS_TOKEN} $CI_PROJECT_ID $CI_MERGE_REQUEST_IID\\n`})}),`\\n`,(0,n.jsx)(e.p,{children:\\"You should pass required parameters to the bash file. Since the file will call the GitLab API and evaluate the MR, it needs the parameters below:\\"}),`\\n`,(0,n.jsxs)(e.ul,{children:[`\\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\\"$ACCESS_TOKEN\\"}),\\": to be authorized to Rest calls\\"]}),`\\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\\"$CI_PROJECT_ID\\"}),\\": current project\'s id\\"]}),`\\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\\"$CI_MERGE_REQUEST_IID\\"}),\\": current MR\'s id\\"]}),`\\n`]}),`\\n`,(0,n.jsx)(e.p,{children:\\"You will see in the second section how these parameters are used. You must define your access token variable in the variables section and set a proper stage for your job.\\"}),`\\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\\"language-yaml\\",children:`stages:\\n  - sdlc\\n\\n...\\n\\nvariables:\\n  ACCESS_TOKEN: $ACCESS_TOKEN\\n\\n...\\n\\napproval-check:\\n  stage: sdlc\\n  only:\\n    - merge_requests\\n  script:\\n    - apt-get -qq update\\n    - apt-get install -y jq\\n    - ./.gitlab_approval.sh \\\\${ACCESS_TOKEN} $CI_PROJECT_ID $CI_MERGE_REQUEST_IID\\n`})}),`\\n`,(0,n.jsx)(e.h2,{children:\\"2. Create Job/Workflow Logic\\"}),`\\n`,(0,n.jsx)(e.p,{children:\\"Create a bash file and make some REST requests to gitlab.com to gather info about the MR. Evaluate approval info for that MR and return an error if the approval count is not sufficient.\\"}),`\\n`,(0,n.jsx)(e.h3,{children:\\"2.1 Install JQ\\"}),`\\n`,(0,n.jsxs)(e.p,{children:[\\"You must install \\",(0,n.jsx)(e.a,{href:\\"https://jqlang.github.io/jq/\\",children:\\"jq\\"}),\\" command-line tool for JSON parsing. Installation is already added to the \\",(0,n.jsx)(e.code,{children:\\"approval-check\\"}),\\" job, and for test purposes, you can install it like below.\\"]}),`\\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\\"language-bash\\",children:`$ apt-get install jq\\n`})}),`\\n`,(0,n.jsx)(e.h3,{children:\\"2.2 Create Bash file\\"}),`\\n`,(0,n.jsxs)(e.p,{children:[\\"I named it \\",(0,n.jsx)(e.code,{children:\\".gitlab-approval.sh\\"}),\\" and located it in the root of the repo folder. This bash file has 3 parameters as below.\\"]}),`\\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\\"language-bash\\",children:`# $1 AN_ACCESS_TOKEN with read_api\\n# $2 CI_PROJECT_ID\\n# $3 CI_MERGE_REQUEST_IID\\n`})}),`\\n`,(0,n.jsx)(e.h3,{children:\\"2.3 Gather Related Authors\\"}),`\\n`,(0,n.jsxs)(e.p,{children:[\\"The author of the MR and other companions that approve the current MR are needed. Thus \\",(0,n.jsx)(e.a,{href:\\"https://docs.gitlab.com/ee/api/merge_request_approvals.html#merge-request-level-mr-approvals\\",children:\\"Merge Request Level Approvals\\"}),\\" and \\",(0,n.jsx)(e.a,{href:\\"https://docs.gitlab.com/ee/api/merge_requests.html#get-single-mr\\",children:\\"Get Single MR\\"}),\\" endpoints are used.\\"]}),`\\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\\"language-bash\\",children:`# ----------------------------------- GATHER AUTHOR INFO\\nresp_author=$(curl --header \\"Authorization: Bearer \\\\${1}\\" -s \\"https://gitlab.com/api/v4/projects/\\\\${2}/merge_requests/\\\\${3}\\")\\nauthor=$(echo $resp_author | tr -d \'\\\\\\\\n\' | jq -r \'.author.username\')\\n\\n# ----------------------------------- GATHER APPROVALS\\nresp_approvals=$(curl --header \\"Authorization: Bearer \\\\${1}\\" -s \\"https://gitlab.com/api/v4/projects/\\\\${2}/merge_requests/\\\\${3}/approvals\\")\\napprovals=$(echo $resp_approvals | tr -d \'\\\\\\\\n\' | jq -r \'.approved_by\')\\n`})}),`\\n`,(0,n.jsx)(e.h3,{children:\\"2.4 Counting Valid Approvals\\"}),`\\n`,(0,n.jsx)(e.p,{children:\\"Self-approval is needed to be excluded, and proper approvals should be counted as valid approvals.\\"}),`\\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\\"language-bash\\",children:`total_approval_count=$(echo $approvals | jq length)\\nvalid_approval_count=0\\nfor index in $(seq 0 $(($total_approval_count-1)) )\\ndo\\n    approval_author=$(echo $approvals | jq -r \\".[\\\\${index}].user.username\\")\\n    if [ \\"\\\\${author}\\" != \\"\\\\${approval_author}\\" ]; then\\n        ((valid_approval_count++))\\n    fi\\ndone\\n`})}),`\\n`,(0,n.jsx)(e.h3,{children:\\"2.5 Evaluate Valid Approval Count\\"}),`\\n`,(0,n.jsx)(e.p,{children:\\"If the valid_approval_count is less than the required_approval_count, then the script must exit with an error number, like 1. Otherwise, it should exit with 0.\\"}),`\\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\\"language-bash\\",children:`required_approval_count=2\\n\\nif [ $valid_approval_count -lt $required_approval_count ]; then\\n    echo \\">>>FAILURE<<< At least \\\\${required_approval_count} approvals are needed, from other than the MR author.\\"\\n    exit 1\\nfi\\necho \\">>>SUCCESS<<< This MR has \\\\${required_approval_count} approvals, from other than the MR author.\\"\\nexit 0\\n`})}),`\\n`,(0,n.jsx)(e.h2,{children:\\"Conclusion\\"}),`\\n`,(0,n.jsxs)(e.p,{children:[\\"With this approach, you can simply allow your main branch protected over the required approval count for merge requests without paying for it. However, it depends on the trust in the team; anyone can remove this job directly from the \\",(0,n.jsx)(e.code,{children:\\".gitlab-ci.yml\\"}),\\" file and merge the request. It is not that strict as GitLab/GitHub offers. That\'s why I called this a workaround for only small teams.\\"]}),`\\n`,(0,n.jsx)(e.p,{children:\\"Hope this article will help you with your small projects tend to become a bigger one with multiple development participants. Have a nice day!\\"})]})}function w(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var E=w;return _(C);})();\\n;return Component;"},"_id":"required-approvals-count-gitlab-free-tier.mdx","_raw":{"sourceFilePath":"required-approvals-count-gitlab-free-tier.mdx","sourceFileName":"required-approvals-count-gitlab-free-tier.mdx","sourceFileDir":".","contentType":"mdx","flattenedPath":"required-approvals-count-gitlab-free-tier"},"type":"Post","url":"/posts/required-approvals-count-gitlab-free-tier"}]');[...a]},3447:function(e,n,r){r.d(n,{Z:function(){return o}});var a=r(5893),t=r(4412),i=r(1953);function o(){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.Z,{sx:{marginTop:3}}),(0,a.jsx)(i.Z,{my:2,sx:{display:"flex",justifyContent:"flex-end",fontSize:"small",color:"var(--c2)"},children:"\xa92023 mujdecisy."})]})}},8069:function(e,n,r){r.d(n,{Z:function(){return u}});var a=r(5893),t=r(9918),i=r(4548),o=r(1953),l=r(1664),s=r.n(l);function u(e){let{item:n}=e;return(0,a.jsx)(t.ZP,{alignItems:"flex-start",children:(0,a.jsx)(i.Z,{primary:(0,a.jsxs)(o.Z,{sx:{display:"flex",alignItems:"end",justifyContent:"space-between"},children:[(0,a.jsx)(o.Z,{sx:{overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis"},children:(0,a.jsx)(s(),{href:n.url,children:n.title})}),(0,a.jsxs)(o.Z,{sx:{display:"flex",justifyContent:"end",fontSize:"0.8rem",fontWeight:"200",textAlign:"end",width:"70px"},children:[n.date,(0,a.jsx)(o.Z,{sx:{width:"3px",height:"20px",marginLeft:"5px"}})]})]}),secondary:n.summary})})}},6375:function(e,n,r){r.d(n,{yx:function(){return o}});var a=r(8009),t=r(6625);let i=(0,a.ZF)({apiKey:"AIzaSyAVw1iVB2Z_qk0B43OB_Q3Fhzu_57LUi5c",authDomain:"mujdecisy-5b7bc.firebaseapp.com",projectId:"mujdecisy-5b7bc",storageBucket:"mujdecisy-5b7bc.appspot.com",messagingSenderId:"510162980404",appId:"1:510162980404:web:e236e7cd7c3602d6968461",measurementId:"G-BVWXLCDH9E"});function o(e){let n=(0,t.IH)(i);n&&(0,t.Kz)(n,"visit",{app:"mujdeci-blog",page:e})}}}]);